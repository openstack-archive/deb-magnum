heat_template_version: 2013-05-23

description: >
  This is a nested stack that defines a single Kubernetes minion,
  based on a vanilla Fedora 20 cloud image.  This stack is included by
  a ResourceGroup resource in the parent template (kubecluster-coreos.yaml).

parameters:

  server_image:
    type: string
    default: CoreOS
    description: glance image used to boot the server

  minion_flavor:
    type: string
    default: m1.small
    description: flavor to use when booting the server

  ssh_key_name:
    type: string
    description: name of ssh key to be provisioned on our server
    default: testkey

  external_network:
    type: string
    description: uuid/name of a network to use for floating ip addresses

  kube_allow_priv:
    type: string
    description: >
      whether or not kubernetes should permit privileged containers.
    default: "false"
    constraints:
      - allowed_values: ["true", "false"]

  network_driver:
    type: string
    description: network driver to use for instantiating container networks

  tls_disabled:
    type: boolean
    description: whether or not to enable TLS
    default: False

  kubernetes_port:
    type: number
    description: >
      The port which are used by kube-apiserver to provide Kubernetes
      service.
    default: 8080

  # The following are all generated in the parent template.
  kube_master_ip:
    type: string
    description: IP address of the Kubernetes master server.
  etcd_server_ip:
    type: string
    description: IP address of the Etcd server.
  fixed_network:
    type: string
    description: Network from which to allocate fixed addresses.
  fixed_subnet:
    type: string
    description: Subnet from which to allocate fixed addresses.

resources:

  minion_wait_handle:
    type: OS::Heat::WaitConditionHandle

  minion_wait_condition:
    type: OS::Heat::WaitCondition
    depends_on: kube-minion
    properties:
      handle: {get_resource: minion_wait_handle}
      timeout: 6000

  ######################################################################
  #
  # security groups.  we need to permit network traffic of various
  # sorts.
  #

  secgroup_all_open:
    type: OS::Neutron::SecurityGroup
    properties:
      rules:
        - protocol: icmp
        - protocol: tcp
        - protocol: udp

  ######################################################################
  #
  # software configs.  these are components that are combined into
  # a multipart MIME user-data archive.
  #

  write_heat_params:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config:
        str_replace:
          template: {get_file: fragments/write-heat-params.yaml}
          params:
            $KUBE_ALLOW_PRIV: {get_param: kube_allow_priv}
            $KUBE_MASTER_IP: {get_param: kube_master_ip}
            $WAIT_CURL: {get_attr: [minion_wait_handle, curl_cli]}
            $KUBE_API_PORT: {get_param: kubernetes_port}
            $TLS_DISABLED: {get_param: tls_disabled}
            $NETWORK_DRIVER: {get_param: network_driver}
            $ETCD_SERVER_IP: {get_param: etcd_server_ip}

  enable_network_service:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config: {get_file: fragments/enable-network-service-coreos.yaml}

  enable_kubelet:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config: {get_file: fragments/enable-kubelet-minion-coreos.yaml}

  enable_kube_proxy:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config: {get_file: fragments/enable-kube-proxy-minion-coreos.yaml}

  wc_notify:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config: {get_file: fragments/wc-notify-coreos.yaml}

  kube_minion_init:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config:
        str_replace:
          template: |
            $write_heat_params
            $enable_network_service
            $enable_kubelet
            $enable_kube_proxy
            $wc_notify
            coreos:
              units:
                - name: "enable-network-service.service"
                  command: "start"
                - name: "enable-kubelet.service"
                  command: "start"
                - name: "enable-kube-proxy.service"
                  command: "start"
                - name: "wc-notify.service"
                  command: "start"
          params:
            "$write_heat_params": {get_attr: [write_heat_params, config]}
            "$enable_network_service": {get_attr: [enable_network_service, config]}
            "$enable_kubelet": {get_attr: [enable_kubelet, config]}
            "$enable_kube_proxy": {get_attr: [enable_kube_proxy, config]}
            "$wc_notify": {get_attr: [wc_notify, config]}

  # Important:  the name for the heat resource kube-minion below must
  # not contain "_" (underscore) because it will be used in the
  # hostname.  Because DNS domain name does not allow "_", the "_"
  # will be converted to a "-" and this will make the hostname different
  # from the Nova instance name.  This in turn will break the load
  # balancer feature in Kubernetes.

  kube-minion:
    type: OS::Nova::Server
    properties:
      image: {get_param: server_image}
      flavor: {get_param: minion_flavor}
      key_name: {get_param: ssh_key_name}
      user_data_format: RAW
      user_data: {get_resource: kube_minion_init}
      networks:
        - port: {get_resource: kube_minion_eth0}

  kube_minion_eth0:
    type: OS::Neutron::Port
    properties:
      network: {get_param: fixed_network}
      security_groups:
        - get_resource: secgroup_all_open
      fixed_ips:
        - subnet: {get_param: fixed_subnet}
      replacement_policy: AUTO

  kube_minion_floating:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: {get_param: external_network}
      port_id: {get_resource: kube_minion_eth0}

outputs:

  kube_minion_ip:
    value: {get_attr: [kube_minion_eth0, fixed_ips, 0, ip_address]}

  kube_minion_external_ip:
    value: {get_attr: [kube_minion_floating, floating_ip_address]}

  OS::stack_id:
    value: {get_attr: [kube_minion_eth0, fixed_ips, 0, ip_address]}
